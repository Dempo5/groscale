// ---------------- Generators & datasource ----------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------- Enums ----------------
enum UploadStatus {
  PENDING
  PROCESSING
  SUCCESS
  PARTIAL
  FAILED
}

enum MessageDirection {
  OUTBOUND
  INBOUND
}

enum MessageStatus {
  QUEUED
  SENT
  DELIVERED
  FAILED
  RECEIVED
}

enum WorkflowStatus {
  ACTIVE
  PAUSED
  DRAFT
}

enum StepType {
  SEND_TEXT
  WAIT
}

// ---------------- Core auth ----------------
model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  leads        Lead[]
  phoneNumbers PhoneNumber[]
  uploads      Upload[]
  templates    Template[]
  tags         Tag[]
  threads      MessageThread[]
}

// ---------------- Leads ----------------
model Lead {
  id    String  @id @default(cuid())
  name  String
  email String? @db.VarChar(191)
  phone String? @db.VarChar(30)

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags    LeadTag[]
  threads MessageThread[]

  @@index([ownerId, email])
  @@index([ownerId, phone])
}

// ---------------- Phone numbers (Twilio) ----------------
model PhoneNumber {
  id           String  @id @default(cuid())
  sid          String  @unique
  number       String  @unique
  friendlyName String?
  capabilities Json?
  isDefault    Boolean @default(false)

  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  purchasedAt         DateTime @default(now())
  messagingServiceSid String?  @db.VarChar(34)

  @@index([ownerId, isDefault])
}

// ---------------- Uploads ----------------
model Upload {
  id         String       @id @default(cuid())
  ownerId    String?
  owner      User?        @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  fileName   String
  byteSize   Int
  leads      Int          @default(0)
  duplicates Int          @default(0)
  invalids   Int          @default(0)
  status     UploadStatus @default(PROCESSING)
  error      String?
  reportUrl  String?
  createdAt  DateTime     @default(now())

  @@index([ownerId, createdAt])
}

// ---------------- Messaging ----------------
model MessageThread {
  id             String   @id @default(cuid())
  ownerId        String
  owner          User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  leadId         String
  lead           Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  phoneNumberSid String?  @db.VarChar(34)
  lastMessageAt  DateTime @default(now())
  messages       Message[]

  @@index([ownerId, lastMessageAt])
  @@index([leadId])
}

model Message {
  id          String        @id @default(cuid())
  threadId    String
  thread      MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  direction   MessageDirection
  body        String
  status      MessageStatus @default(QUEUED)
  error       String?
  externalSid String?       @unique
  toNumber    String?
  fromNumber  String?
  createdAt   DateTime      @default(now())

  @@index([threadId, createdAt])
}

// ---------------- Workflows ----------------
model Workflow {
  id        String         @id @default(cuid())
  ownerId   String?
  name      String
  status    WorkflowStatus @default(DRAFT)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  steps WorkflowStep[]
  tags  Tag[]          // inverse of Tag.workflow
}

model WorkflowStep {
  id         String   @id @default(cuid())
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  order      Int

  type     StepType
  textBody String?
  waitMs   Int?
  createdAt DateTime @default(now())

  @@index([workflowId, order])
}

// ---------------- Tags & Templates ----------------
model Tag {
  id         String   @id @default(cuid())
  ownerId    String
  owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  name       String
  color      String?
  workflowId String?
  workflow   Workflow? @relation(fields: [workflowId], references: [id])

  leads     LeadTag[]
  createdAt DateTime @default(now())

  @@unique([ownerId, name])
  @@index([workflowId])
}

model LeadTag {
  leadId String
  lead   Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([leadId, tagId])
}

model Template {
  id        String   @id @default(cuid())
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name      String
  body      String
  createdAt DateTime @default(now())

  @@unique([ownerId, name])
}

// ---------------- Messaging ----------------
model MessageThread {
  id             String   @id @default(cuid())
  ownerId        String
  owner          User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  leadId         String
  lead           Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  phoneNumberSid String?  @db.VarChar(34)
  lastMessageAt  DateTime @default(now())
  messages       Message[]

  @@index([ownerId, lastMessageAt])
  @@index([leadId])
}

enum MessageDirection { OUTBOUND INBOUND }
enum MessageStatus    { QUEUED SENT DELIVERED FAILED RECEIVED }

model Message {
  id          String        @id @default(cuid())
  threadId    String
  thread      MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  direction   MessageDirection
  body        String
  status      MessageStatus @default(QUEUED)
  error       String?
  externalSid String? @unique
  toNumber    String?
  fromNumber  String?
  createdAt   DateTime @default(now())

  @@index([threadId, createdAt])
}
